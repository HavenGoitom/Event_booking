import axios from "axios";
import dotenv from "dotenv";
import express from "express";
import cors from "cors";
import {ReturnTheTotalPriceOfTickets , GivenEmailSelectTheUser , GivenEventIdSelectAccountAndBankFromOrganiser ,  EventTableUpdate , ReturnTheNumOfTicketsAvailable} from 'DataBaseManipulation.js'

dotenv.config()

// using post req be sure to handle the post request to the notify url

// when creating a checkout session
// header
// x-arifpay-key:
// Your Arif API Key
// Content-Type:
// application/json

// u will do a post req to BASE_URL/api/checkout/

// {  this will be a response from the arif pay server for ur checkout session
// the header will tell u if the req was successful , failed , not found ... through numbers
//   "error": false,
//   "msg": "No Errors",
//   "data": {
//     "sessionId": "ED54BDB4D5BF2D",
//     "paymentUrl": "https://checkout.arifpay.org/checkout/ED54BDB4D5BF2D",
//     "cancelUrl": "https://gateway.arifpay.org/v0/checkout/session/cancelED54BDB4D5BF2D",
//     "totalAmount": 1.0
//   }
// }

// and in the body all the infos 

// const app = express();

app.use(express.json());

app.listen(process.env.PORT || 3000 , () => {
    console.log('The server is ready to chat with arif pay server and it lives at port number 3000')
})


// 256-bit nonce, base64url without padding  -> this is a nonce generator
import crypto from 'crypto';

function base64url(buf) {
  return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}

function generateNonce() {
  const bytes = crypto.randomBytes(32); // 32 bytes = 256 bits
  return base64url(bytes); // URL-safe string
}

// so the frontend will send this information
// the users phone , email , nonce , paymentMethods , items , lang =  'EN' , cancelUrl , errorUrl , notifyUrl , successUrl , expireDate , beneficiaries 
// so to access this u will use email to find users phone 
// nonce is generated
// paymentMethods , lang = 'EN' , cancelUrl , errorUrl , notifyUrl , successUrl  are unchanging 
//  expireDate will be set to be 20 min + new Date().now()
//  , beneficiaries -> using the events id we will query the events table and locate the organisers id and then select the bank account and merchant id to send to arif pay server

async function ProperDataArrangement(FrontEndSentInfo){
    // FrontEndSentInfo = {
    // email , items : {
    // EventId , TicketType : vip / normal , TicketQuantity}
    // }
    
    // vip is not defined
    let {email , items} = FrontEndSentInfo

    let Vip;
    if (items.TicketType === 'vip'){
        Vip = true;
    }

    // first u need to check if the tickets are available
    let AvailableTickets = await ReturnTheNumOfTicketsAvailable(items.EventId);

    if (!(Vip && (AvailableTickets.AvailableTicketsVip < items.TicketQuantity) )){
        return "There is no available vip ticket"
    }

    if (!Vip && (AvailableTickets.AvailableTicketsNormal < items.TicketQuantity) ){
        return "There is no normal ticket left"
    }

    // we will need usersPhone
    let userInfo = await GivenEmailSelectTheUser({user : true , organiser : false , Email : email});
    // do we need await here?
    // userInfo = {id , phone} -> in a proper structure
    // email will be received from the FrontEndSentInfo

    let totalMoney = await ReturnTheTotalPriceOfTickets(items)
    // is it number?

    let expireDate = new Date( Date.now() + 20 * 60 * 1000).toISOString()
    // the payment will expire after 20 minutes

    // how tp generate the nonce -> probably in the backend
    // if this works properly then make the user select different tickets and pay all at once

    // select the organisers id and their acccount
    let BeneficiaryInfo = await GivenEventIdSelectAccountAndBankFromOrganiser(items.EventId);
    // BeneficiaryInfo = {Bank : sthg , BankAccount : Sthg}


    const payload = {
        cancelUrl : 'nfjj',// link of a frontend page 
        NotifyUrl : 'nfjj',// link where the arif pay server will send the webhook's response obj 
        successUrl : 'nfjj',// link of a frontend page
        errorUrl : 'nfjj',// link of a frontend page
        phone : userInfo.phone ,
        email , // bc the FrontEndSentInfoWillhaveit
        nonce : generateNonce(),// generated by something from the frontend
        paymentMethods : ["TELEBIRR"], // temporarily telebirr
        expireDate ,
        items  ,// is that neccessary ?
        lang : 'EN' ,
        beneficiaries : [
            {
                accountNumber : BeneficiaryInfo.BankAccount,
                bank : BeneficiaryInfo.Bank,
                amount : totalMoney
            }
        ],
        // u also need a transaction id here

    }


    console.log(payload)

    return {payload , items} ;

    

    
}


export const arifPayFunction =  async (req , res) => {
    // this is where u will recive the request to payment and you talk to arifpay server

    let properData = await  ProperDataArrangement(req.body)

    if (properData === 'There is no available vip ticket' || properData === 'There is no normal ticket left'){
        console.log("The payment cant be processed because of lack of ticker")
        return res.status(400).json({ message: properData })
    }

    let {payload , items} = properData;

    

    // then send the info to arifpay server
    // initializing the payment session
    const responseObj = await axios.post(
        `${process.env.ARIFPAY_BASE_URL}/checkout/session`,
        payload ,
        {
            headers : {
                'x-arifpay-key' : `${process.env.ARIFPAY_API_KEY}`,
                // u need the api key to identify urself as a valid request maker
                'Content-Type' : 'application/json'
            } , 
            timeout : 20000
        }
    )



    let ArifpayReceivedAndimp = {
        // write this in a response body
        sessionId : responseObj.data.data.sessionId ,
        // used to verify transaction using session id
        checkoutUrl : responseObj.data.data.paymentUrl,
        // where the users will be redirected to make their payment
        // send the customer to this page
        status : responseObj.data.data.status
        // it tells u if the payment done was successful or not

    }

    if (Number(ArifpayReceivedAndimp.status) === 200){
        // if the arif pay server has properly sent some data
        // then update the Events table
        // we need to know the ticket type of the user

        // so EventTicketsBought {eventId , Vip : true / false , NumOfTicketsBought}
        let EventToUpdateInfo = {
            eventId : items.EventId , 
            Vip : items.TicketType === 'vip' ? true : false ,
            NumOfTicketsBought : Number(items.TicketQuantity)
        }
        
        await  EventTableUpdate(EventToUpdateInfo);


    }


}

// once the transaction is confirmed from the web hook we will update the events table by the number of tickets bought 
// so we will need a function to accept the post request to accept the webhook from arif pay
// the notify url will be the backend api end point we use to handle the notify url
// the web hook will send a post req with sessionId , transaction id and status
// u need an idempotency key to safely do the proper request
// You send it with the initial payment request to Arif Pay
// then set it in the header part to make the transaction occur properly

// On your server side:  - Idempotency issue

// You store a mapping: idempotencyKey → transactionId/status.

// Before sending a payment request, check if that key was already used.

// On Arif Pay side:

// They track the Idempotency-Key for a certain period.

// If they receive a request with the same key, they return the original transaction response.


// transaction managment
// provide an api key in the req header to ensure it matches the one used during session creation

// Verify the transaction status using the session ID
// Verify the transaction status using the transaction ID
// Verify the transaction status using the nonce

// using checkout session



export const  arifPayTransfer =
        async (request , response) => {
            try{
                const { Sessionid , PhoneNumber } = request.body || {};

                if (!Sessionid || !PhoneNumber){
                    return response.status(400).json({
                        message : "Session id and phone number are required"
                    })
                }

                // check the phone number starts with valid values 
                if (!/^251\d{9}/.test(PhoneNumber)){
                    return response.status(400).json({
                        message : "The phone number is not in the correct 2519XXXXXXXXX or 2517XXXXXXXXXX "
                    })
                }

                const payLoad = {Sessionid , PhoneNumber};

                const responseObj = await axios.post(`${process.env.ARIFPAY_BASE_URL}/Telebirr/b2c/transfer` ,
                    payLoad , 
                    {
                        headers : {
                            "x-arifpay-key" : process.env.ARIFPAY_API_KEY ,
                            "Content-Type" : "application/json",
                        },
                        timeout : 20000 ,
                    }
                );

                return response.json(responseObj.data);

            } catch(error) {
                console.error("[telebrr/transfer]" , error.response?.data || error.message)
                res.status(404).json({"message" : error})
                // the error obj have got either message or response attribute
                // console.error() is like console.log but signifies that it is error
                // console.error() takes a bunch of messages and just prints them in order
            }
        }



import express from "express";
import crypto from "crypto";
import { PrismaClient } from "@prisma/client";
import dotenv from "dotenv";

dotenv.config();
const app = express();
const prisma = new PrismaClient();

const WEBHOOK_SECRET = process.env.ARIFPAY_WEBHOOK_SECRET;

// ArifPay sends raw JSON (do not parse before verifying)
app.post(
  "/api/payments/notify",
  express.raw({ type: "application/json" }),
  async (req, res) => {
    try {
      // --- 1️⃣ Verify signature ---
      const signature = req.headers["x-arifpay-signature"];
      if (!signature) {
        console.error("Missing signature header");
        return res.status(400).send("Missing signature");
      }

      const hmac = crypto
        .createHmac("sha256", WEBHOOK_SECRET)
        .update(req.body)
        .digest("hex");

      const valid = crypto.timingSafeEqual(
        Buffer.from(signature),
        Buffer.from(hmac)
      );
      if (!valid) {
        console.error("Invalid signature");
        return res.status(400).send("Invalid signature");
      }

      // --- 2️⃣ Parse payload safely ---
      const payload = JSON.parse(req.body.toString());
      const { sessionId, status, eventId, ticketType, quantity, userEmail } =
        payload || {};

      if (!sessionId || !status) {
        console.error("Incomplete payload", payload);
        return res.status(400).send("Invalid payload");
      }

      // --- 3️⃣ Idempotency check ---
      const existing = await prisma.payment.findUnique({
        where: { sessionId },
      });
      if (existing) {
        console.log(`Duplicate webhook for session ${sessionId}, ignoring`);
        return res.status(200).send("Already processed");
      }

      // --- 4️⃣ Only process successful payments ---
      if (status === "SUCCESS") {
        console.log(`Payment confirmed for ${sessionId}`);

        // create payment record
        await prisma.payment.create({
          data: {
            sessionId,
            status,
            email: userEmail,
            eventId,
            amount: payload.amount,
            createdAt: new Date(),
          },
        });

        // decrement tickets atomically
        const field =
          ticketType === "vip"
            ? { AvailableTicketsVip: { decrement: quantity } }
            : { AvailableTicketsNormal: { decrement: quantity } };

        await prisma.event.update({
          where: { id: eventId },
          data: field,
        });

        console.log(`Updated event ${eventId} after payment`);
      }

      // --- 5️⃣ Respond quickly ---
      res.status(200).send("Webhook received");
    } catch (err) {
      console.error("Webhook error:", err);
      res.status(500).send("Server error");
    }
  }
);

app.listen(3000, () =>
  console.log("Webhook server running on http://localhost:3000")
);


// Cancel Checkout Session
// what if u changed an inventory or realized that they are out of ticket
// when to cancel
// Session status is PENDING
// Customer hasn't completed payment yet
// Product is out of stock
// Customer requests cancellation
// Business logic requires stopping the transaction

// how to cancel 
// You need the session ID that was returned when you created the checkout session. It looks like:
// Make the API Call
// Send a POST request to the cancel endpoint with your API key in the header:


// Handle the Response
// Check if the cancellation was successful and update your system accordingly. The session status will change to canceled.
// No Request Body Needed
// This API call doesn't require any data in the request body - just the session ID in the URL and your API key in the header.


// Component	Value	Example
// HTTP Method	POST	POST
// URL Path	/api/sandbox/checkout/session/(session_id)	/api/sandbox/checkout/session/cs_1234567890abcdef
// Header: Content-Type	application/json	application/json
// Header: x-arifpay-key	Your API Key	sk_test_abcl23...
// Request Body	Empty (no body needed)	{}

