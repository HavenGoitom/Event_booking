import axios from "axios";
import dotenv from "dotenv";
import express from "express";
import cors from "cors";
import {ReturnTheTotalPriceOfTickets , GivenEmailSelectTheUser , GivenEventIdSelectAccountAndBankFromOrganiser} from 'DataBaseManipulation.js'

dotenv.config()

const app = express();

app.use(express.json());

app.listen(process.env.PORT || 3000 , () => {
    console.log('The server is ready to chat with arif pay server and it lives at port number 3000')
})

// so the frontend will send this information
// the users phone , email , nonce , paymentMethods , items , lang =  'EN' , cancelUrl , errorUrl , notifyUrl , successUrl , expireDate , beneficiaries 
// so to access this u will use email to find users phone 
// nonce is generated
// paymentMethods , lang = 'EN' , cancelUrl , errorUrl , notifyUrl , successUrl  are unchanging 
//  expireDate will be set to be 20 min + new Date().now()
//  , beneficiaries -> using the events id we will query the events table and locate the organisers id and then select the bank account and merchant id to send to arif pay server

async function ProperDataArrangement(FrontEndSentInfo){
    // FrontEndSentInfo = {
    // email , items : {
    // EventId , TicketType , TicketQuantity}
    // }

    let {email , items} = FrontEndSentInfo

    // we will need usersPhone
    let userInfo = await GivenEmailSelectTheUser({user : true , organiser : false , Email : email});
    // do we need await here?
    // userInfo = {id , phone} -> in a proper structure
    // email will be received from the FrontEndSentInfo

    let totalMoney = await ReturnTheTotalPriceOfTickets(items)

    let expireDate = new Date( Date.now() + 20 * 60 * 1000).toISOString()
    // the payment will expire after 20 minutes

    // how tp generate the nonce -> probably in the backend
    // if this works properly then make the user select different tickets and pay all at once

    // select the organisers id and their acccount
    let BeneficiaryInfo = await GivenEventIdSelectAccountAndBankFromOrganiser(items.EventId);
    // BeneficiaryInfo = {Bank : sthg , BankAccount : Sthg}


    const payload = {
        cancelUrl : 'nfjj',// link of a frontend page 
        NotifyUrl : 'nfjj',// link of a frontend page
        successUrl : 'nfjj',// link of a frontend page
        errorUrl : 'nfjj',// link of a frontend page
        phone : userInfo.phone ,
        email , // bc the FrontEndSentInfoWillhaveit
        nonce : 'nfjj',// generated by something from the frontend
        paymentMethods : ["TELEBIRR"], // temporarily telebirr
        expireDate ,
        items : [] ,// is that neccessary ?
        lang : 'EN' ,
        beneficiaries : [
            {
                accountNumber : BeneficiaryInfo.BankAccount,
                bank : BeneficiaryInfo.Bank,
                amount : totalMoney
            }
        ]

    }


    console.log(payload)

    return payload;

    

    
}


app.post('/api/payment/checkout' , async (req , res) => {
    // this is where u will recive the request to payment and you talk to arifpay server

    let payload = await  ProperDataArrangement(req.body)

    // then send the info to arifpay server
    const responseObj = await axios.post(
        `${process.env.ARIFPAY_BASE_URL}/checkout/session`,
        payload ,
        {
            headers : {
                'x-arifpay-key' : `${process.env.ARIFPAY_API_KEY}`,
                // u need the api key to identify urself as a valid request maker
                'Content-Type' : 'application/json'
            } , 
            timeout : 20000
        }
    )

    res.json({
        // write this in a response body
        "Access-Control-Allow-Origin" : "https://localhost:5173/" , 
        // allow ur front end to talk to the back so ur front end port will be this
        sessionId : responseObj.data.data.sessionId ,
        // used to verify transaction using session id
        checkoutUrl : responseObj.data.data.paymentUrl
    })


})

// once the transaction is confirmed from the web hook we will update the events table by the number of tickets bought 



